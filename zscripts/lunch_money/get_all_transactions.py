"""
07/04/2024
SUCCESS
{'ids': [2218716752, 2218716753, 2218716754, 2218716755, 2218716756, 2218716757, 2218716758, 2218716759, 2218716760, 2218716761, 2218716762, 2218716763, 2218716764, 2218716765, 2218716766, 2218716767, 2218716768, 2218716769, 2218716770, 2218716771, 2218716772, 2218716773, 2218716774, 2218716775, 2218716776, 2218716777, 2218716778, 2218716779, 2218716780, 2218716781, 2218716782, 2218716783, 2218716784, 2218716785, 2218716786, 2218716787, 2218716788, 2218716789, 2218716790, 2218716791, 2218716792, 2218716793, 2218716794, 2218716795, 2218716796, 2218716797, 2218716798, 2218716799, 2218716800, 2218716801, 2218716802, 2218716803, 2218716804, 2218716805, 2218716806, 2218716807, 2218716808, 2218716809, 2218716810, 2218716811, 2218716812, 2218716813, 2218716814, 2218716815, 2218716816, 2218716817, 2218716818, 2218716819, 2218716820, 2218716821, 2218716822, 2218716823, 2218716824, 2218716825, 2218716826, 2218716827, 2218716828, 2218716829, 2218716830, 2218716831, 2218716832, 2218716833, 2218716834, 2218716835, 2218716836, 2218716837, 2218716838, 2218716839, 2218716840, 2218716841, 2218716842, 2218716843, 2218716844, 2218716845, 2218716846, 2218716847, 2218716848, 2218716849, 2218716850, 2218716851, 2218716852, 2218716853, 2218716854, 2218716855, 2218716856, 2218716857, 2218716858, 2218716859, 2218716860, 2218716861, 2218716862, 2218716863, 2218716864, 2218716865, 2218716866, 2218716867, 2218716868, 2218716869, 2218716870, 2218716871, 2218716872, 2218716873, 2218716874, 2218716875, 2218716876, 2218716877, 2218716878, 2218716879, 2218716880, 2218716881, 2218716882, 2218716883, 2218716884, 2218716885, 2218716886, 2218716887, 2218716888, 2218716889, 2218716890, 2218716891, 2218716892, 2218716893, 2218716894, 2218716895, 2218716896, 2218716897, 2218716898, 2218716899, 2218716900, 2218716901, 2218716902, 2218716903, 2218716904, 2218716905, 2218716906, 2218716907, 2218716908, 2218716909, 2218716910, 2218716911, 2218716912, 2218716913, 2218716914, 2218716915, 2218716916, 2218716917, 2218716918, 2218716919, 2218716920, 2218716921, 2218716922, 2218716923, 2218716924, 2218716925, 2218716926, 2218716927, 2218716928, 2218716929, 2218716930, 2218716931, 2218716932, 2218716933, 2218716934, 2218716935, 2218716936, 2218716937, 2218716938, 2218716939, 2218716940, 2218716941, 2218716942, 2218716943, 2218716944, 2218716945, 2218716946, 2218716947, 2218716948, 2218716949, 2218716950, 2218716951, 2218716952, 2218716953, 2218716954, 2218716955, 2218716956, 2218716957, 2218716958, 2218716959, 2218716960, 2218716961, 2218716962, 2218716963, 2218716964, 2218716965, 2218716966, 2218716967, 2218716968, 2218716969, 2218716970, 2218716971, 2218716972, 2218716973, 2218716974, 2218716975, 2218716976, 2218716977, 2218716978, 2218716979, 2218716980, 2218716981, 2218716982, 2218716983, 2218716984, 2218716985, 2218716986, 2218716987, 2218716988, 2218716989, 2218716990, 2218716991, 2218716992, 2218716993, 2218716994, 2218716995, 2218716996, 2218716997, 2218716998, 2218716999, 2218717000, 2218717001, 2218717002, 2218717003, 2218717004, 2218717005, 2218717006]}
"""
import os

import arrow
import requests
import pandas as pd
from arrow import Arrow
from dotenv import load_dotenv

from expense_tracker.datasources.lunch_money_datasource import LunchMoneyDatasource, TxnStatus
from expense_tracker.et_types.statistic_service_types import Timeframe

load_dotenv()
LUNCH_MONEY_ACCESS_TOKEN = os.getenv('LUNCH_MONEY_API_KEY')

#==============
#  CONSTANT
#==============
TIMEFRAME_FORMAT = "YYYY-MM-DD"
endpoint = "https://dev.lunchmoney.app/v1/transactions"
headers = {
    'Authorization': f'Bearer {LUNCH_MONEY_ACCESS_TOKEN}',
    'Content-Type': 'application/json'
}
params = {
    "debit_as_negative": True,
    "status": TxnStatus.CLEARED.value,
}

#==============
#  UTILS
#==============
def generate_monthly_timeframes(start: Arrow, end: Arrow):
    # Initialize an empty list to store monthly timeframes
    monthly_timeframes = []

    # Generate monthly timeframes
    current_month = start.floor('month')
    while current_month <= end:
        next_month = current_month.shift(months=1)
        monthly_timeframes.append((current_month.format(TIMEFRAME_FORMAT), next_month.format(TIMEFRAME_FORMAT)))
        current_month = next_month

    return monthly_timeframes

#==============
#  MAIN
#==============
timeframe_start = Arrow(2024, 1, 1)
timeframe_end = arrow.now().floor('day')
timeframe_list = generate_monthly_timeframes(timeframe_start, timeframe_end)
df_list: list[pd.DataFrame] = []
datasource = LunchMoneyDatasource()

for start_date, end_date in timeframe_list:
    # df: pd.DataFrame = datasource.get_transactions(Timeframe(start_date, end_date))
    print(start_date, end_date)
    df = pd.DataFrame()
    df_list.append(df)
df_merged = pd.concat(df_list, ignore_index=True, sort=False)
df_merged.to_csv(f'txn_list_{timeframe_start.format("YYYY-MM-DD")}_to_{timeframe_end.format("YYYY-MM-DD")}.csv')